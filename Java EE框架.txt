1.Tomcat装载Servlet的三种情况
（1）Servlet容器启动时自动装载某些Servlet,实现它只需要在web.xml文件中的<Servlet></Servlet>之间添加如下代码
：<loadon-startup>1</loadon-starup>数字越小表示优先级别越高。
（2）在Servlet容器启动后，客户首次向Servlet发送请求
（3）Servlet类文件被更新后，会重新装载Servlet

2.创建的servlet是继承自httpServlet，而不是直接实现Servlet接口的原理
https://www.cnblogs.com/zhangyinhua/p/7625851.html

3.转发（forward）和重定向（redirect）的区别：
转发是在服务器端的行为，重定向是客户端的行为；
转发的话的地址栏URL不变，重定向的话地址URL发送了变化；
转发的是同一次请求，重定向会执行两次请求；
转发只能转发到本应用内的url,重定向可以请求本应用外的资源；
转发之后保存在request中的信息还是共享的，而重定向则不是。


3.JSP的三大指令作用
（1）page：用于定义JSP页面的各种属性，无论page指令出现在JSP页面中的哪个位置，它都是作用于整个JSP
（2）include：用于包含文件
-----Jsp中的静态包含与动态包含
   @include指令（静态包含）：等文件全部包含进来只有，在一起进行编译
   jsp:include指令（动态包含）：会先将文件进行编译，在包含。
（3）taglib:用于在JSP页面中导入标签库。

4.JSP的九大内置对象
（1）request对象：代表了客户端的请求信息，接受通过http协议传送到服务器的数据。  作用域为一次请求。
（2）response对象：代表了对客户端的响应信息。主要是将JSP容器处理过的对象传送给客户端。  它只在JSP页面中有效
（3）session对象：由服务器创建的与用户请求相关的信息。用于保存用户的信息，跟踪用户的操作状态。
（4）application对象：可将信息保存在服务器中，直到服务器关闭。
（5）out对象：向web浏览器输出信息
（6）exception对象：用于显示异常信息，只有在包含 isErrorPage="true" 的页面中才可以被使用
（7）page对象：代表JSP本身，只有在JSP页面内才是合法的。
（8）pageContext对象：对象的创建和初始化都是由容器来完成的，作用：可以获取任何范围内的参数。获取JSP页面的out、request等对象
（9）config对象：取得服务器的配置信息。


5.JSP和Servlet的区别：
 JSP其实的servlet的扩展,JSP主要用于显示视图，servlet则主要用于处理业务逻辑
 JSP的执行过程：一般由容器交给JSP执行引擎，先翻译成servlet(Java文件)，在编译成class文件，然后执行同servlet一样的操作。
 
 
 
6.JDK动态代理和CGLib动态代理：
 JDK动态代理：目标类必须实现了一个接口，实现InvocationHandle接口，通过Proxy.newProxyInstance()方法获得目标类的一个代理类
 CGLib动态代理：通过实现Inteceptor接口，生成一个目标类的子类
 
7.Spring中的注解：
@Component：可以用于注册所有bean
@Repository：主要用于注册dao层的bean
@Controller：主要用于注册控制层的bean
@Service：主要用于注册服务层的bean
-------@Resource默认按照名称方式进行bean匹配，@Autowired默认按照类型方式进行bean匹配


8.Spring AOP:
 连接点（joinpoint）:
 被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，
 实际上连接点还可以是字段或者构造器
 
 通知（advice）:
所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类
----通知执行的优先级
进入目标方法时,先织入Around,再织入Before，退出目标方法时，先织入Around,再织入AfterReturning,最后才织入After。
注意:Spring AOP的环绕通知会影响到AfterThrowing通知的运行,不要同时使用!同时使用也没啥意义。

切入点（pointcut）:
对连接点进行拦截的定义

切面（Aspect）:
是切入点和通知（引介）的结合

目标对象
代理的目标对象

 9.Spring IOC的理解：
 IOC:控制反转，将创建对象的主动权交给容器去创建。
 DI:依赖注入，容器创建完对象之后，当我们需要对象的时候帮我们注入到其中。
 
 ====好处：（1）降低了模块间的耦合度，当需要对象的时候直接注入即可。（2）方便进行单元测试。
 
 ====技术剖析
 利用了反射机制。
 好处：在运行的过程中，动态的获取类的对象、方法、属性等
 缺点：（1）反射需要消耗性能，在一定程度上会降低效率 （2）会破坏对象的安全性，可以动态获取私有的一些属性，破坏了它的权限性。
 
 10.Struts拦截器和Spring AOP区别
  struts2使用拦截器主要是用来处理用户的请求，OGNL的使用，表单验证 等 
  而spring的拦截器，主要体现在AOP的事务管理方面，还有比如一些错误或者异常的日志的显示 也是通过配置spring的log拦截器来实现的
  
  11.Spring IOC的初始化过程：
  （1）定位Resource资源文件
  （2）BeanDifition的载入
     ---构造一个BeanFactory，也就是IOC容器
	 ---调用XML解析器得到document对象
	 ---按照Spring的规则解析成BeanDifition
  （3）向IOC容器中注册BeanDefinition，这个过程其实就是将前面的BeanDefinition保存到HashMap的过程。
  
  
  
  12.SpringMVC和Struts的区别：
（1）SpringMVC是方法级别的拦截，一个方法对应一个request上下文，是单例的；
     Struts是基于类的设计，是多例的，每次发一个请求，都会实例一个action
 （2）SpringMVC的入口是servlet，而Struts的入口是filter,导致了这两个的机制不同
        servlet:主要进行逻辑处理，读取客户端的请求信息，处理完请求对象之后，将返回的信息封装在响应对象中，返回给客户端
		Fielter:在一个请求到达servlet之前，先对请求信息进行预处理，当servlet处理完之后，可以处理http响应信息
		可以做进行字符编码的过滤，实现用户自动登录，禁止页面缓存。
 （3）struts有以自己的interceptor机制，springmvc用的是独立的AOP方式。这样导致struts的配置文件量还是比springmvc大
 （4）SpringMVC可以很容易的处理ajax请求，只需加一个注解@ResponseBody,则可以直接返回json数据，处理很方便
 

 
  13.session和cookie的区别：
 （1）cookie数据存放在客户的浏览器上，session数据放在服务器上。

（2）cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。

（3）session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。

（4）单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。

（5）可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。


   14.Hibernate中get和load有什么不同之处?
   （1）Hibernate的get方法，会确认一下该id对应的数据是否存在，首先在session缓存中查找，然后在二级缓存中查找，还没有就查询数据库，数据库中没有就返回null。
   （2）Hibernate的load方法加载实体对象的时候，根据映射文件上类级别的lazy属性的配置(默认为true)：
    ①若为true,则首先在Session缓存中查找，看看该id对应的对象是否存在，不存在则使用延迟加载，
	返回实体的代理类对象(该代理类为实体类的子类，由CGLIB动态生成)。等到具体使用该对象(除获取OID以外)的时候，
	再查询二级缓存和数据库，若仍没发现符合条件的记录，则会抛出一个ObjectNotFoundException。 
     ②若为false,就跟Hibernate的get方法查找顺序一样，只是最终若没发现符合条件的记录，则会抛出一个ObjectNotFoundException，
	 所说的load方法抛异常是指在使用该对象的数据时，数据库中不存在该数据时抛异常，而不是在创建这个对象时。



